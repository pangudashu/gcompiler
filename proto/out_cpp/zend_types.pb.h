// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zend_types.proto

#ifndef PROTOBUF_zend_5ftypes_2eproto__INCLUDED
#define PROTOBUF_zend_5ftypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace gphp {
class HashTable;
class HashTableDefaultTypeInternal;
extern HashTableDefaultTypeInternal _HashTable_default_instance_;
class HashTable_Item;
class HashTable_ItemDefaultTypeInternal;
extern HashTable_ItemDefaultTypeInternal _HashTable_Item_default_instance_;
class Zval;
class ZvalDefaultTypeInternal;
extern ZvalDefaultTypeInternal _Zval_default_instance_;
class Zval_Value;
class Zval_ValueDefaultTypeInternal;
extern Zval_ValueDefaultTypeInternal _Zval_Value_default_instance_;
}  // namespace gphp

namespace gphp {

namespace protobuf_zend_5ftypes_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_zend_5ftypes_2eproto

enum Zval_Type {
  Zval_Type_TYPE_UNDEF = 0,
  Zval_Type_TYPE_NULL = 1,
  Zval_Type_TYPE_BOOL = 2,
  Zval_Type_TYPE_LONG = 4,
  Zval_Type_TYPE_DOUBLE = 5,
  Zval_Type_TYPE_STRING = 6,
  Zval_Type_TYPE_ARRAY = 7,
  Zval_Type_TYPE_OBJECT = 8,
  Zval_Type_TYPE_RESOURCE = 9,
  Zval_Type_TYPE_REFERENCE = 10
};
bool Zval_Type_IsValid(int value);
const Zval_Type Zval_Type_Type_MIN = Zval_Type_TYPE_UNDEF;
const Zval_Type Zval_Type_Type_MAX = Zval_Type_TYPE_REFERENCE;
const int Zval_Type_Type_ARRAYSIZE = Zval_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Zval_Type_descriptor();
inline const ::std::string& Zval_Type_Name(Zval_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Zval_Type_descriptor(), value);
}
inline bool Zval_Type_Parse(
    const ::std::string& name, Zval_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Zval_Type>(
    Zval_Type_descriptor(), name, value);
}
enum HashTable_Item_KeyType {
  HashTable_Item_KeyType_KEYTYPE_STR = 1,
  HashTable_Item_KeyType_KEYTYPE_NUM = 2
};
bool HashTable_Item_KeyType_IsValid(int value);
const HashTable_Item_KeyType HashTable_Item_KeyType_KeyType_MIN = HashTable_Item_KeyType_KEYTYPE_STR;
const HashTable_Item_KeyType HashTable_Item_KeyType_KeyType_MAX = HashTable_Item_KeyType_KEYTYPE_NUM;
const int HashTable_Item_KeyType_KeyType_ARRAYSIZE = HashTable_Item_KeyType_KeyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* HashTable_Item_KeyType_descriptor();
inline const ::std::string& HashTable_Item_KeyType_Name(HashTable_Item_KeyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    HashTable_Item_KeyType_descriptor(), value);
}
inline bool HashTable_Item_KeyType_Parse(
    const ::std::string& name, HashTable_Item_KeyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HashTable_Item_KeyType>(
    HashTable_Item_KeyType_descriptor(), name, value);
}
// ===================================================================

class Zval_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gphp.Zval.Value) */ {
 public:
  Zval_Value();
  virtual ~Zval_Value();

  Zval_Value(const Zval_Value& from);

  inline Zval_Value& operator=(const Zval_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Zval_Value(Zval_Value&& from) noexcept
    : Zval_Value() {
    *this = ::std::move(from);
  }

  inline Zval_Value& operator=(Zval_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Zval_Value& default_instance();

  static inline const Zval_Value* internal_default_instance() {
    return reinterpret_cast<const Zval_Value*>(
               &_Zval_Value_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Zval_Value* other);
  friend void swap(Zval_Value& a, Zval_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Zval_Value* New() const PROTOBUF_FINAL { return New(NULL); }

  Zval_Value* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Zval_Value& from);
  void MergeFrom(const Zval_Value& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Zval_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string str = 4;
  bool has_str() const;
  void clear_str();
  static const int kStrFieldNumber = 4;
  const ::std::string& str() const;
  void set_str(const ::std::string& value);
  #if LANG_CXX11
  void set_str(::std::string&& value);
  #endif
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  ::std::string* mutable_str();
  ::std::string* release_str();
  void set_allocated_str(::std::string* str);

  // optional .gphp.HashTable arr = 5;
  bool has_arr() const;
  void clear_arr();
  static const int kArrFieldNumber = 5;
  const ::gphp::HashTable& arr() const;
  ::gphp::HashTable* mutable_arr();
  ::gphp::HashTable* release_arr();
  void set_allocated_arr(::gphp::HashTable* arr);

  // optional int64 lval = 2;
  bool has_lval() const;
  void clear_lval();
  static const int kLvalFieldNumber = 2;
  ::google::protobuf::int64 lval() const;
  void set_lval(::google::protobuf::int64 value);

  // optional double dval = 3;
  bool has_dval() const;
  void clear_dval();
  static const int kDvalFieldNumber = 3;
  double dval() const;
  void set_dval(double value);

  // optional bool bval = 1;
  bool has_bval() const;
  void clear_bval();
  static const int kBvalFieldNumber = 1;
  bool bval() const;
  void set_bval(bool value);

  // @@protoc_insertion_point(class_scope:gphp.Zval.Value)
 private:
  void set_has_bval();
  void clear_has_bval();
  void set_has_lval();
  void clear_has_lval();
  void set_has_dval();
  void clear_has_dval();
  void set_has_str();
  void clear_has_str();
  void set_has_arr();
  void clear_has_arr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr str_;
  ::gphp::HashTable* arr_;
  ::google::protobuf::int64 lval_;
  double dval_;
  bool bval_;
  friend struct protobuf_zend_5ftypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Zval : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gphp.Zval) */ {
 public:
  Zval();
  virtual ~Zval();

  Zval(const Zval& from);

  inline Zval& operator=(const Zval& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Zval(Zval&& from) noexcept
    : Zval() {
    *this = ::std::move(from);
  }

  inline Zval& operator=(Zval&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Zval& default_instance();

  static inline const Zval* internal_default_instance() {
    return reinterpret_cast<const Zval*>(
               &_Zval_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Zval* other);
  friend void swap(Zval& a, Zval& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Zval* New() const PROTOBUF_FINAL { return New(NULL); }

  Zval* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Zval& from);
  void MergeFrom(const Zval& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Zval* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Zval_Value Value;

  typedef Zval_Type Type;
  static const Type TYPE_UNDEF =
    Zval_Type_TYPE_UNDEF;
  static const Type TYPE_NULL =
    Zval_Type_TYPE_NULL;
  static const Type TYPE_BOOL =
    Zval_Type_TYPE_BOOL;
  static const Type TYPE_LONG =
    Zval_Type_TYPE_LONG;
  static const Type TYPE_DOUBLE =
    Zval_Type_TYPE_DOUBLE;
  static const Type TYPE_STRING =
    Zval_Type_TYPE_STRING;
  static const Type TYPE_ARRAY =
    Zval_Type_TYPE_ARRAY;
  static const Type TYPE_OBJECT =
    Zval_Type_TYPE_OBJECT;
  static const Type TYPE_RESOURCE =
    Zval_Type_TYPE_RESOURCE;
  static const Type TYPE_REFERENCE =
    Zval_Type_TYPE_REFERENCE;
  static inline bool Type_IsValid(int value) {
    return Zval_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Zval_Type_Type_MIN;
  static const Type Type_MAX =
    Zval_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Zval_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Zval_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Zval_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Zval_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .gphp.Zval.Value value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::gphp::Zval_Value& value() const;
  ::gphp::Zval_Value* mutable_value();
  ::gphp::Zval_Value* release_value();
  void set_allocated_value(::gphp::Zval_Value* value);

  // required .gphp.Zval.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::gphp::Zval_Type type() const;
  void set_type(::gphp::Zval_Type value);

  // @@protoc_insertion_point(class_scope:gphp.Zval)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::gphp::Zval_Value* value_;
  int type_;
  friend struct protobuf_zend_5ftypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HashTable_Item : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gphp.HashTable.Item) */ {
 public:
  HashTable_Item();
  virtual ~HashTable_Item();

  HashTable_Item(const HashTable_Item& from);

  inline HashTable_Item& operator=(const HashTable_Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HashTable_Item(HashTable_Item&& from) noexcept
    : HashTable_Item() {
    *this = ::std::move(from);
  }

  inline HashTable_Item& operator=(HashTable_Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HashTable_Item& default_instance();

  static inline const HashTable_Item* internal_default_instance() {
    return reinterpret_cast<const HashTable_Item*>(
               &_HashTable_Item_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(HashTable_Item* other);
  friend void swap(HashTable_Item& a, HashTable_Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HashTable_Item* New() const PROTOBUF_FINAL { return New(NULL); }

  HashTable_Item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HashTable_Item& from);
  void MergeFrom(const HashTable_Item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HashTable_Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HashTable_Item_KeyType KeyType;
  static const KeyType KEYTYPE_STR =
    HashTable_Item_KeyType_KEYTYPE_STR;
  static const KeyType KEYTYPE_NUM =
    HashTable_Item_KeyType_KEYTYPE_NUM;
  static inline bool KeyType_IsValid(int value) {
    return HashTable_Item_KeyType_IsValid(value);
  }
  static const KeyType KeyType_MIN =
    HashTable_Item_KeyType_KeyType_MIN;
  static const KeyType KeyType_MAX =
    HashTable_Item_KeyType_KeyType_MAX;
  static const int KeyType_ARRAYSIZE =
    HashTable_Item_KeyType_KeyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  KeyType_descriptor() {
    return HashTable_Item_KeyType_descriptor();
  }
  static inline const ::std::string& KeyType_Name(KeyType value) {
    return HashTable_Item_KeyType_Name(value);
  }
  static inline bool KeyType_Parse(const ::std::string& name,
      KeyType* value) {
    return HashTable_Item_KeyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string str_key = 2;
  bool has_str_key() const;
  void clear_str_key();
  static const int kStrKeyFieldNumber = 2;
  const ::std::string& str_key() const;
  void set_str_key(const ::std::string& value);
  #if LANG_CXX11
  void set_str_key(::std::string&& value);
  #endif
  void set_str_key(const char* value);
  void set_str_key(const char* value, size_t size);
  ::std::string* mutable_str_key();
  ::std::string* release_str_key();
  void set_allocated_str_key(::std::string* str_key);

  // required .gphp.Zval val = 4;
  bool has_val() const;
  void clear_val();
  static const int kValFieldNumber = 4;
  const ::gphp::Zval& val() const;
  ::gphp::Zval* mutable_val();
  ::gphp::Zval* release_val();
  void set_allocated_val(::gphp::Zval* val);

  // optional uint64 num_key = 3;
  bool has_num_key() const;
  void clear_num_key();
  static const int kNumKeyFieldNumber = 3;
  ::google::protobuf::uint64 num_key() const;
  void set_num_key(::google::protobuf::uint64 value);

  // required .gphp.HashTable.Item.KeyType key_type = 1;
  bool has_key_type() const;
  void clear_key_type();
  static const int kKeyTypeFieldNumber = 1;
  ::gphp::HashTable_Item_KeyType key_type() const;
  void set_key_type(::gphp::HashTable_Item_KeyType value);

  // @@protoc_insertion_point(class_scope:gphp.HashTable.Item)
 private:
  void set_has_key_type();
  void clear_has_key_type();
  void set_has_str_key();
  void clear_has_str_key();
  void set_has_num_key();
  void clear_has_num_key();
  void set_has_val();
  void clear_has_val();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr str_key_;
  ::gphp::Zval* val_;
  ::google::protobuf::uint64 num_key_;
  int key_type_;
  friend struct protobuf_zend_5ftypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HashTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gphp.HashTable) */ {
 public:
  HashTable();
  virtual ~HashTable();

  HashTable(const HashTable& from);

  inline HashTable& operator=(const HashTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HashTable(HashTable&& from) noexcept
    : HashTable() {
    *this = ::std::move(from);
  }

  inline HashTable& operator=(HashTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HashTable& default_instance();

  static inline const HashTable* internal_default_instance() {
    return reinterpret_cast<const HashTable*>(
               &_HashTable_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(HashTable* other);
  friend void swap(HashTable& a, HashTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HashTable* New() const PROTOBUF_FINAL { return New(NULL); }

  HashTable* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HashTable& from);
  void MergeFrom(const HashTable& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HashTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HashTable_Item Item;

  // accessors -------------------------------------------------------

  // repeated .gphp.HashTable.Item items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::gphp::HashTable_Item& items(int index) const;
  ::gphp::HashTable_Item* mutable_items(int index);
  ::gphp::HashTable_Item* add_items();
  ::google::protobuf::RepeatedPtrField< ::gphp::HashTable_Item >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::gphp::HashTable_Item >&
      items() const;

  // @@protoc_insertion_point(class_scope:gphp.HashTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gphp::HashTable_Item > items_;
  friend struct protobuf_zend_5ftypes_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Zval_Value

// optional bool bval = 1;
inline bool Zval_Value::has_bval() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Zval_Value::set_has_bval() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Zval_Value::clear_has_bval() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Zval_Value::clear_bval() {
  bval_ = false;
  clear_has_bval();
}
inline bool Zval_Value::bval() const {
  // @@protoc_insertion_point(field_get:gphp.Zval.Value.bval)
  return bval_;
}
inline void Zval_Value::set_bval(bool value) {
  set_has_bval();
  bval_ = value;
  // @@protoc_insertion_point(field_set:gphp.Zval.Value.bval)
}

// optional int64 lval = 2;
inline bool Zval_Value::has_lval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Zval_Value::set_has_lval() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Zval_Value::clear_has_lval() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Zval_Value::clear_lval() {
  lval_ = GOOGLE_LONGLONG(0);
  clear_has_lval();
}
inline ::google::protobuf::int64 Zval_Value::lval() const {
  // @@protoc_insertion_point(field_get:gphp.Zval.Value.lval)
  return lval_;
}
inline void Zval_Value::set_lval(::google::protobuf::int64 value) {
  set_has_lval();
  lval_ = value;
  // @@protoc_insertion_point(field_set:gphp.Zval.Value.lval)
}

// optional double dval = 3;
inline bool Zval_Value::has_dval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Zval_Value::set_has_dval() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Zval_Value::clear_has_dval() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Zval_Value::clear_dval() {
  dval_ = 0;
  clear_has_dval();
}
inline double Zval_Value::dval() const {
  // @@protoc_insertion_point(field_get:gphp.Zval.Value.dval)
  return dval_;
}
inline void Zval_Value::set_dval(double value) {
  set_has_dval();
  dval_ = value;
  // @@protoc_insertion_point(field_set:gphp.Zval.Value.dval)
}

// optional string str = 4;
inline bool Zval_Value::has_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Zval_Value::set_has_str() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Zval_Value::clear_has_str() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Zval_Value::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str();
}
inline const ::std::string& Zval_Value::str() const {
  // @@protoc_insertion_point(field_get:gphp.Zval.Value.str)
  return str_.GetNoArena();
}
inline void Zval_Value::set_str(const ::std::string& value) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gphp.Zval.Value.str)
}
#if LANG_CXX11
inline void Zval_Value::set_str(::std::string&& value) {
  set_has_str();
  str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gphp.Zval.Value.str)
}
#endif
inline void Zval_Value::set_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gphp.Zval.Value.str)
}
inline void Zval_Value::set_str(const char* value, size_t size) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gphp.Zval.Value.str)
}
inline ::std::string* Zval_Value::mutable_str() {
  set_has_str();
  // @@protoc_insertion_point(field_mutable:gphp.Zval.Value.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Zval_Value::release_str() {
  // @@protoc_insertion_point(field_release:gphp.Zval.Value.str)
  clear_has_str();
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Zval_Value::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    set_has_str();
  } else {
    clear_has_str();
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:gphp.Zval.Value.str)
}

// optional .gphp.HashTable arr = 5;
inline bool Zval_Value::has_arr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Zval_Value::set_has_arr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Zval_Value::clear_has_arr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Zval_Value::clear_arr() {
  if (arr_ != NULL) arr_->::gphp::HashTable::Clear();
  clear_has_arr();
}
inline const ::gphp::HashTable& Zval_Value::arr() const {
  const ::gphp::HashTable* p = arr_;
  // @@protoc_insertion_point(field_get:gphp.Zval.Value.arr)
  return p != NULL ? *p : *reinterpret_cast<const ::gphp::HashTable*>(
      &::gphp::_HashTable_default_instance_);
}
inline ::gphp::HashTable* Zval_Value::mutable_arr() {
  set_has_arr();
  if (arr_ == NULL) {
    arr_ = new ::gphp::HashTable;
  }
  // @@protoc_insertion_point(field_mutable:gphp.Zval.Value.arr)
  return arr_;
}
inline ::gphp::HashTable* Zval_Value::release_arr() {
  // @@protoc_insertion_point(field_release:gphp.Zval.Value.arr)
  clear_has_arr();
  ::gphp::HashTable* temp = arr_;
  arr_ = NULL;
  return temp;
}
inline void Zval_Value::set_allocated_arr(::gphp::HashTable* arr) {
  delete arr_;
  arr_ = arr;
  if (arr) {
    set_has_arr();
  } else {
    clear_has_arr();
  }
  // @@protoc_insertion_point(field_set_allocated:gphp.Zval.Value.arr)
}

// -------------------------------------------------------------------

// Zval

// required .gphp.Zval.Type type = 1;
inline bool Zval::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Zval::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Zval::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Zval::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::gphp::Zval_Type Zval::type() const {
  // @@protoc_insertion_point(field_get:gphp.Zval.type)
  return static_cast< ::gphp::Zval_Type >(type_);
}
inline void Zval::set_type(::gphp::Zval_Type value) {
  assert(::gphp::Zval_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:gphp.Zval.type)
}

// required .gphp.Zval.Value value = 2;
inline bool Zval::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Zval::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Zval::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Zval::clear_value() {
  if (value_ != NULL) value_->::gphp::Zval_Value::Clear();
  clear_has_value();
}
inline const ::gphp::Zval_Value& Zval::value() const {
  const ::gphp::Zval_Value* p = value_;
  // @@protoc_insertion_point(field_get:gphp.Zval.value)
  return p != NULL ? *p : *reinterpret_cast<const ::gphp::Zval_Value*>(
      &::gphp::_Zval_Value_default_instance_);
}
inline ::gphp::Zval_Value* Zval::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::gphp::Zval_Value;
  }
  // @@protoc_insertion_point(field_mutable:gphp.Zval.value)
  return value_;
}
inline ::gphp::Zval_Value* Zval::release_value() {
  // @@protoc_insertion_point(field_release:gphp.Zval.value)
  clear_has_value();
  ::gphp::Zval_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline void Zval::set_allocated_value(::gphp::Zval_Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:gphp.Zval.value)
}

// -------------------------------------------------------------------

// HashTable_Item

// required .gphp.HashTable.Item.KeyType key_type = 1;
inline bool HashTable_Item::has_key_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HashTable_Item::set_has_key_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HashTable_Item::clear_has_key_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HashTable_Item::clear_key_type() {
  key_type_ = 1;
  clear_has_key_type();
}
inline ::gphp::HashTable_Item_KeyType HashTable_Item::key_type() const {
  // @@protoc_insertion_point(field_get:gphp.HashTable.Item.key_type)
  return static_cast< ::gphp::HashTable_Item_KeyType >(key_type_);
}
inline void HashTable_Item::set_key_type(::gphp::HashTable_Item_KeyType value) {
  assert(::gphp::HashTable_Item_KeyType_IsValid(value));
  set_has_key_type();
  key_type_ = value;
  // @@protoc_insertion_point(field_set:gphp.HashTable.Item.key_type)
}

// optional string str_key = 2;
inline bool HashTable_Item::has_str_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HashTable_Item::set_has_str_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HashTable_Item::clear_has_str_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HashTable_Item::clear_str_key() {
  str_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str_key();
}
inline const ::std::string& HashTable_Item::str_key() const {
  // @@protoc_insertion_point(field_get:gphp.HashTable.Item.str_key)
  return str_key_.GetNoArena();
}
inline void HashTable_Item::set_str_key(const ::std::string& value) {
  set_has_str_key();
  str_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gphp.HashTable.Item.str_key)
}
#if LANG_CXX11
inline void HashTable_Item::set_str_key(::std::string&& value) {
  set_has_str_key();
  str_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gphp.HashTable.Item.str_key)
}
#endif
inline void HashTable_Item::set_str_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str_key();
  str_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gphp.HashTable.Item.str_key)
}
inline void HashTable_Item::set_str_key(const char* value, size_t size) {
  set_has_str_key();
  str_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gphp.HashTable.Item.str_key)
}
inline ::std::string* HashTable_Item::mutable_str_key() {
  set_has_str_key();
  // @@protoc_insertion_point(field_mutable:gphp.HashTable.Item.str_key)
  return str_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HashTable_Item::release_str_key() {
  // @@protoc_insertion_point(field_release:gphp.HashTable.Item.str_key)
  clear_has_str_key();
  return str_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HashTable_Item::set_allocated_str_key(::std::string* str_key) {
  if (str_key != NULL) {
    set_has_str_key();
  } else {
    clear_has_str_key();
  }
  str_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str_key);
  // @@protoc_insertion_point(field_set_allocated:gphp.HashTable.Item.str_key)
}

// optional uint64 num_key = 3;
inline bool HashTable_Item::has_num_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HashTable_Item::set_has_num_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HashTable_Item::clear_has_num_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HashTable_Item::clear_num_key() {
  num_key_ = GOOGLE_ULONGLONG(0);
  clear_has_num_key();
}
inline ::google::protobuf::uint64 HashTable_Item::num_key() const {
  // @@protoc_insertion_point(field_get:gphp.HashTable.Item.num_key)
  return num_key_;
}
inline void HashTable_Item::set_num_key(::google::protobuf::uint64 value) {
  set_has_num_key();
  num_key_ = value;
  // @@protoc_insertion_point(field_set:gphp.HashTable.Item.num_key)
}

// required .gphp.Zval val = 4;
inline bool HashTable_Item::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HashTable_Item::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HashTable_Item::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HashTable_Item::clear_val() {
  if (val_ != NULL) val_->::gphp::Zval::Clear();
  clear_has_val();
}
inline const ::gphp::Zval& HashTable_Item::val() const {
  const ::gphp::Zval* p = val_;
  // @@protoc_insertion_point(field_get:gphp.HashTable.Item.val)
  return p != NULL ? *p : *reinterpret_cast<const ::gphp::Zval*>(
      &::gphp::_Zval_default_instance_);
}
inline ::gphp::Zval* HashTable_Item::mutable_val() {
  set_has_val();
  if (val_ == NULL) {
    val_ = new ::gphp::Zval;
  }
  // @@protoc_insertion_point(field_mutable:gphp.HashTable.Item.val)
  return val_;
}
inline ::gphp::Zval* HashTable_Item::release_val() {
  // @@protoc_insertion_point(field_release:gphp.HashTable.Item.val)
  clear_has_val();
  ::gphp::Zval* temp = val_;
  val_ = NULL;
  return temp;
}
inline void HashTable_Item::set_allocated_val(::gphp::Zval* val) {
  delete val_;
  val_ = val;
  if (val) {
    set_has_val();
  } else {
    clear_has_val();
  }
  // @@protoc_insertion_point(field_set_allocated:gphp.HashTable.Item.val)
}

// -------------------------------------------------------------------

// HashTable

// repeated .gphp.HashTable.Item items = 1;
inline int HashTable::items_size() const {
  return items_.size();
}
inline void HashTable::clear_items() {
  items_.Clear();
}
inline const ::gphp::HashTable_Item& HashTable::items(int index) const {
  // @@protoc_insertion_point(field_get:gphp.HashTable.items)
  return items_.Get(index);
}
inline ::gphp::HashTable_Item* HashTable::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:gphp.HashTable.items)
  return items_.Mutable(index);
}
inline ::gphp::HashTable_Item* HashTable::add_items() {
  // @@protoc_insertion_point(field_add:gphp.HashTable.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gphp::HashTable_Item >*
HashTable::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:gphp.HashTable.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gphp::HashTable_Item >&
HashTable::items() const {
  // @@protoc_insertion_point(field_list:gphp.HashTable.items)
  return items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace gphp

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gphp::Zval_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gphp::Zval_Type>() {
  return ::gphp::Zval_Type_descriptor();
}
template <> struct is_proto_enum< ::gphp::HashTable_Item_KeyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gphp::HashTable_Item_KeyType>() {
  return ::gphp::HashTable_Item_KeyType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zend_5ftypes_2eproto__INCLUDED
