// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zend_op_array.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zend_op_array.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gphp {
class OplineDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Opline>
     _instance;
} _Opline_default_instance_;
class ZendOpArrayDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ZendOpArray>
     _instance;
} _ZendOpArray_default_instance_;

namespace protobuf_zend_5fop_5farray_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opline, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opline, opcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opline, op1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opline, op1_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opline, op2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opline, op2_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opline, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opline, result_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opline, extended_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opline, lineno_),
  0,
  1,
  7,
  2,
  8,
  3,
  6,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZendOpArray, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZendOpArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZendOpArray, opcodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZendOpArray, literals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZendOpArray, var_size_),
  ~0u,
  ~0u,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(Opline)},
  { 23, 31, sizeof(ZendOpArray)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Opline_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ZendOpArray_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "zend_op_array.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::gphp::protobuf_zend_5ftypes_2eproto::InitDefaults();
  _Opline_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Opline_default_instance_);_ZendOpArray_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ZendOpArray_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023zend_op_array.proto\022\004gphp\032\020zend_types."
      "proto\"\257\002\n\006Opline\022\034\n\006opcode\030\001 \002(\0162\014.gphp."
      "Opcode\022\013\n\003op1\030\002 \001(\r\022%\n\010op1_type\030\003 \001(\0162\023."
      "gphp.Opline.OpType\022\013\n\003op2\030\004 \001(\r\022%\n\010op2_t"
      "ype\030\005 \001(\0162\023.gphp.Opline.OpType\022\016\n\006result"
      "\030\006 \001(\r\022(\n\013result_type\030\007 \001(\0162\023.gphp.Oplin"
      "e.OpType\022\026\n\016extended_value\030\010 \001(\r\022\016\n\006line"
      "no\030\t \001(\r\"=\n\006OpType\022\t\n\005CONST\020\001\022\013\n\007TMP_VAR"
      "\020\002\022\007\n\003VAR\020\004\022\n\n\006UNUSED\020\010\022\006\n\002CV\020\020\"\\\n\013ZendO"
      "pArray\022\035\n\007opcodes\030\001 \003(\0132\014.gphp.Opline\022\034\n"
      "\010literals\030\002 \003(\0132\n.gphp.Zval\022\020\n\010var_size\030"
      "\003 \002(\r*\227\031\n\006Opcode\022\007\n\003NOP\020\000\022\007\n\003ADD\020\001\022\007\n\003SU"
      "B\020\002\022\007\n\003MUL\020\003\022\007\n\003DIV\020\004\022\007\n\003MOD\020\005\022\006\n\002SL\020\006\022\006"
      "\n\002SR\020\007\022\n\n\006CONCAT\020\010\022\t\n\005BW_OR\020\t\022\n\n\006BW_AND\020"
      "\n\022\n\n\006BW_XOR\020\013\022\n\n\006BW_NOT\020\014\022\014\n\010BOOL_NOT\020\r\022"
      "\014\n\010BOOL_XOR\020\016\022\020\n\014IS_IDENTICAL\020\017\022\024\n\020IS_NO"
      "T_IDENTICAL\020\020\022\014\n\010IS_EQUAL\020\021\022\020\n\014IS_NOT_EQ"
      "UAL\020\022\022\016\n\nIS_SMALLER\020\023\022\027\n\023IS_SMALLER_OR_E"
      "QUAL\020\024\022\010\n\004CAST\020\025\022\r\n\tQM_ASSIGN\020\026\022\016\n\nASSIG"
      "N_ADD\020\027\022\016\n\nASSIGN_SUB\020\030\022\016\n\nASSIGN_MUL\020\031\022"
      "\016\n\nASSIGN_DIV\020\032\022\016\n\nASSIGN_MOD\020\033\022\r\n\tASSIG"
      "N_SL\020\034\022\r\n\tASSIGN_SR\020\035\022\021\n\rASSIGN_CONCAT\020\036"
      "\022\020\n\014ASSIGN_BW_OR\020\037\022\021\n\rASSIGN_BW_AND\020 \022\021\n"
      "\rASSIGN_BW_XOR\020!\022\013\n\007PRE_INC\020\"\022\013\n\007PRE_DEC"
      "\020#\022\014\n\010POST_INC\020$\022\014\n\010POST_DEC\020%\022\n\n\006ASSIGN"
      "\020&\022\016\n\nASSIGN_REF\020\'\022\010\n\004ECHO\020(\022\024\n\020GENERATO"
      "R_CREATE\020)\022\007\n\003JMP\020*\022\010\n\004JMPZ\020+\022\t\n\005JMPNZ\020,"
      "\022\n\n\006JMPZNZ\020-\022\013\n\007JMPZ_EX\020.\022\014\n\010JMPNZ_EX\020/\022"
      "\010\n\004CASE\0200\022\r\n\tCHECK_VAR\0201\022\026\n\022SEND_VAR_NO_"
      "REF_EX\0202\022\014\n\010MAKE_REF\0203\022\010\n\004BOOL\0204\022\017\n\013FAST"
      "_CONCAT\0205\022\r\n\tROPE_INIT\0206\022\014\n\010ROPE_ADD\0207\022\014"
      "\n\010ROPE_END\0208\022\021\n\rBEGIN_SILENCE\0209\022\017\n\013END_S"
      "ILENCE\020:\022\026\n\022INIT_FCALL_BY_NAME\020;\022\014\n\010DO_F"
      "CALL\020<\022\016\n\nINIT_FCALL\020=\022\n\n\006RETURN\020>\022\010\n\004RE"
      "CV\020\?\022\r\n\tRECV_INIT\020@\022\014\n\010SEND_VAL\020A\022\017\n\013SEN"
      "D_VAR_EX\020B\022\014\n\010SEND_REF\020C\022\007\n\003NEW\020D\022\031\n\025INI"
      "T_NS_FCALL_BY_NAME\020E\022\010\n\004FREE\020F\022\016\n\nINIT_A"
      "RRAY\020G\022\025\n\021ADD_ARRAY_ELEMENT\020H\022\023\n\017INCLUDE"
      "_OR_EVAL\020I\022\r\n\tUNSET_VAR\020J\022\r\n\tUNSET_DIM\020K"
      "\022\r\n\tUNSET_OBJ\020L\022\016\n\nFE_RESET_R\020M\022\016\n\nFE_FE"
      "TCH_R\020N\022\010\n\004EXIT\020O\022\013\n\007FETCH_R\020P\022\017\n\013FETCH_"
      "DIM_R\020Q\022\017\n\013FETCH_OBJ_R\020R\022\013\n\007FETCH_W\020S\022\017\n"
      "\013FETCH_DIM_W\020T\022\017\n\013FETCH_OBJ_W\020U\022\014\n\010FETCH"
      "_RW\020V\022\020\n\014FETCH_DIM_RW\020W\022\020\n\014FETCH_OBJ_RW\020"
      "X\022\014\n\010FETCH_IS\020Y\022\020\n\014FETCH_DIM_IS\020Z\022\020\n\014FET"
      "CH_OBJ_IS\020[\022\022\n\016FETCH_FUNC_ARG\020\\\022\026\n\022FETCH"
      "_DIM_FUNC_ARG\020]\022\026\n\022FETCH_OBJ_FUNC_ARG\020^\022"
      "\017\n\013FETCH_UNSET\020_\022\023\n\017FETCH_DIM_UNSET\020`\022\023\n"
      "\017FETCH_OBJ_UNSET\020a\022\016\n\nFETCH_LIST\020b\022\022\n\016FE"
      "TCH_CONSTANT\020c\022\014\n\010EXT_STMT\020e\022\023\n\017EXT_FCAL"
      "L_BEGIN\020f\022\021\n\rEXT_FCALL_END\020g\022\013\n\007EXT_NOP\020"
      "h\022\t\n\005TICKS\020i\022\023\n\017SEND_VAR_NO_REF\020j\022\t\n\005CAT"
      "CH\020k\022\t\n\005THROW\020l\022\017\n\013FETCH_CLASS\020m\022\t\n\005CLON"
      "E\020n\022\021\n\rRETURN_BY_REF\020o\022\024\n\020INIT_METHOD_CA"
      "LL\020p\022\033\n\027INIT_STATIC_METHOD_CALL\020q\022\025\n\021ISS"
      "ET_ISEMPTY_VAR\020r\022\031\n\025ISSET_ISEMPTY_DIM_OB"
      "J\020s\022\017\n\013SEND_VAL_EX\020t\022\014\n\010SEND_VAR\020u\022\022\n\016IN"
      "IT_USER_CALL\020v\022\016\n\nSEND_ARRAY\020w\022\r\n\tSEND_U"
      "SER\020x\022\n\n\006STRLEN\020y\022\013\n\007DEFINED\020z\022\016\n\nTYPE_C"
      "HECK\020{\022\026\n\022VERIFY_RETURN_TYPE\020|\022\017\n\013FE_RES"
      "ET_RW\020}\022\017\n\013FE_FETCH_RW\020~\022\013\n\007FE_FREE\020\177\022\026\n"
      "\021INIT_DYNAMIC_CALL\020\200\001\022\r\n\010DO_ICALL\020\201\001\022\r\n\010"
      "DO_UCALL\020\202\001\022\025\n\020DO_FCALL_BY_NAME\020\203\001\022\020\n\013PR"
      "E_INC_OBJ\020\204\001\022\020\n\013PRE_DEC_OBJ\020\205\001\022\021\n\014POST_I"
      "NC_OBJ\020\206\001\022\021\n\014POST_DEC_OBJ\020\207\001\022\017\n\nASSIGN_O"
      "BJ\020\210\001\022\014\n\007OP_DATA\020\211\001\022\017\n\nINSTANCEOF\020\212\001\022\022\n\r"
      "DECLARE_CLASS\020\213\001\022\034\n\027DECLARE_INHERITED_CL"
      "ASS\020\214\001\022\025\n\020DECLARE_FUNCTION\020\215\001\022\017\n\nYIELD_F"
      "ROM\020\216\001\022\022\n\rDECLARE_CONST\020\217\001\022\022\n\rADD_INTERF"
      "ACE\020\220\001\022$\n\037DECLARE_INHERITED_CLASS_DELAYE"
      "D\020\221\001\022\032\n\025VERIFY_ABSTRACT_CLASS\020\222\001\022\017\n\nASSI"
      "GN_DIM\020\223\001\022\033\n\026ISSET_ISEMPTY_PROP_OBJ\020\224\001\022\025"
      "\n\020HANDLE_EXCEPTION\020\225\001\022\020\n\013USER_OPCODE\020\226\001\022"
      "\021\n\014ASSERT_CHECK\020\227\001\022\014\n\007JMP_SET\020\230\001\022\034\n\027DECL"
      "ARE_LAMBDA_FUNCTION\020\231\001\022\016\n\tADD_TRAIT\020\232\001\022\020"
      "\n\013BIND_TRAITS\020\233\001\022\r\n\010SEPARATE\020\234\001\022\025\n\020FETCH"
      "_CLASS_NAME\020\235\001\022\024\n\017CALL_TRAMPOLINE\020\236\001\022\026\n\021"
      "DISCARD_EXCEPTION\020\237\001\022\n\n\005YIELD\020\240\001\022\025\n\020GENE"
      "RATOR_RETURN\020\241\001\022\016\n\tFAST_CALL\020\242\001\022\r\n\010FAST_"
      "RET\020\243\001\022\022\n\rRECV_VARIADIC\020\244\001\022\020\n\013SEND_UNPAC"
      "K\020\245\001\022\010\n\003POW\020\246\001\022\017\n\nASSIGN_POW\020\247\001\022\020\n\013BIND_"
      "GLOBAL\020\250\001\022\r\n\010COALESCE\020\251\001\022\016\n\tSPACESHIP\020\252\001"
      "\022\027\n\022DECLARE_ANON_CLASS\020\253\001\022!\n\034DECLARE_ANO"
      "N_INHERITED_CLASS\020\254\001\022\030\n\023FETCH_STATIC_PRO"
      "P_R\020\255\001\022\030\n\023FETCH_STATIC_PROP_W\020\256\001\022\031\n\024FETC"
      "H_STATIC_PROP_RW\020\257\001\022\031\n\024FETCH_STATIC_PROP"
      "_IS\020\260\001\022\037\n\032FETCH_STATIC_PROP_FUNC_ARG\020\261\001\022"
      "\034\n\027FETCH_STATIC_PROP_UNSET\020\262\001\022\026\n\021UNSET_S"
      "TATIC_PROP\020\263\001\022\036\n\031ISSET_ISEMPTY_STATIC_PR"
      "OP\020\264\001\022\031\n\024FETCH_CLASS_CONSTANT\020\265\001\022\021\n\014BIND"
      "_LEXICAL\020\266\001\022\020\n\013BIND_STATIC\020\267\001\022\017\n\nFETCH_T"
      "HIS\020\270\001\022\027\n\022ISSET_ISEMPTY_THIS\020\272\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3671);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zend_op_array.proto", &protobuf_RegisterTypes);
  ::gphp::protobuf_zend_5ftypes_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_zend_5fop_5farray_2eproto

const ::google::protobuf::EnumDescriptor* Opline_OpType_descriptor() {
  protobuf_zend_5fop_5farray_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zend_5fop_5farray_2eproto::file_level_enum_descriptors[0];
}
bool Opline_OpType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Opline_OpType Opline::CONST;
const Opline_OpType Opline::TMP_VAR;
const Opline_OpType Opline::VAR;
const Opline_OpType Opline::UNUSED;
const Opline_OpType Opline::CV;
const Opline_OpType Opline::OpType_MIN;
const Opline_OpType Opline::OpType_MAX;
const int Opline::OpType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Opcode_descriptor() {
  protobuf_zend_5fop_5farray_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zend_5fop_5farray_2eproto::file_level_enum_descriptors[1];
}
bool Opcode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 186:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Opline::kOpcodeFieldNumber;
const int Opline::kOp1FieldNumber;
const int Opline::kOp1TypeFieldNumber;
const int Opline::kOp2FieldNumber;
const int Opline::kOp2TypeFieldNumber;
const int Opline::kResultFieldNumber;
const int Opline::kResultTypeFieldNumber;
const int Opline::kExtendedValueFieldNumber;
const int Opline::kLinenoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Opline::Opline()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zend_5fop_5farray_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gphp.Opline)
}
Opline::Opline(const Opline& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&opcode_, &from.opcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&op2_type_) -
    reinterpret_cast<char*>(&opcode_)) + sizeof(op2_type_));
  // @@protoc_insertion_point(copy_constructor:gphp.Opline)
}

void Opline::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&opcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lineno_) -
      reinterpret_cast<char*>(&opcode_)) + sizeof(lineno_));
  result_type_ = 1;
  op1_type_ = 1;
  op2_type_ = 1;
}

Opline::~Opline() {
  // @@protoc_insertion_point(destructor:gphp.Opline)
  SharedDtor();
}

void Opline::SharedDtor() {
}

void Opline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Opline::descriptor() {
  protobuf_zend_5fop_5farray_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zend_5fop_5farray_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Opline& Opline::default_instance() {
  protobuf_zend_5fop_5farray_2eproto::InitDefaults();
  return *internal_default_instance();
}

Opline* Opline::New(::google::protobuf::Arena* arena) const {
  Opline* n = new Opline;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Opline::Clear() {
// @@protoc_insertion_point(message_clear_start:gphp.Opline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&opcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lineno_) -
        reinterpret_cast<char*>(&opcode_)) + sizeof(lineno_));
    result_type_ = 1;
    op1_type_ = 1;
  }
  op2_type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Opline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gphp.Opline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gphp.Opcode opcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gphp::Opcode_IsValid(value)) {
            set_opcode(static_cast< ::gphp::Opcode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 op1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_op1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gphp.Opline.OpType op1_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gphp::Opline_OpType_IsValid(value)) {
            set_op1_type(static_cast< ::gphp::Opline_OpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 op2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_op2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gphp.Opline.OpType op2_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gphp::Opline_OpType_IsValid(value)) {
            set_op2_type(static_cast< ::gphp::Opline_OpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 result = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gphp.Opline.OpType result_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gphp::Opline_OpType_IsValid(value)) {
            set_result_type(static_cast< ::gphp::Opline_OpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 extended_value = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_extended_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extended_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lineno = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_lineno();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lineno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gphp.Opline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gphp.Opline)
  return false;
#undef DO_
}

void Opline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gphp.Opline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gphp.Opcode opcode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->opcode(), output);
  }

  // optional uint32 op1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->op1(), output);
  }

  // optional .gphp.Opline.OpType op1_type = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->op1_type(), output);
  }

  // optional uint32 op2 = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->op2(), output);
  }

  // optional .gphp.Opline.OpType op2_type = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->op2_type(), output);
  }

  // optional uint32 result = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->result(), output);
  }

  // optional .gphp.Opline.OpType result_type = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->result_type(), output);
  }

  // optional uint32 extended_value = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->extended_value(), output);
  }

  // optional uint32 lineno = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->lineno(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gphp.Opline)
}

::google::protobuf::uint8* Opline::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gphp.Opline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gphp.Opcode opcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->opcode(), target);
  }

  // optional uint32 op1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->op1(), target);
  }

  // optional .gphp.Opline.OpType op1_type = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->op1_type(), target);
  }

  // optional uint32 op2 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->op2(), target);
  }

  // optional .gphp.Opline.OpType op2_type = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->op2_type(), target);
  }

  // optional uint32 result = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->result(), target);
  }

  // optional .gphp.Opline.OpType result_type = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->result_type(), target);
  }

  // optional uint32 extended_value = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->extended_value(), target);
  }

  // optional uint32 lineno = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->lineno(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gphp.Opline)
  return target;
}

size_t Opline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gphp.Opline)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .gphp.Opcode opcode = 1;
  if (has_opcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->opcode());
  }
  if (_has_bits_[0 / 32] & 254u) {
    // optional uint32 op1 = 2;
    if (has_op1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op1());
    }

    // optional uint32 op2 = 4;
    if (has_op2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op2());
    }

    // optional uint32 result = 6;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 extended_value = 8;
    if (has_extended_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extended_value());
    }

    // optional uint32 lineno = 9;
    if (has_lineno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lineno());
    }

    // optional .gphp.Opline.OpType result_type = 7;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_type());
    }

    // optional .gphp.Opline.OpType op1_type = 3;
    if (has_op1_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op1_type());
    }

  }
  // optional .gphp.Opline.OpType op2_type = 5;
  if (has_op2_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op2_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Opline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gphp.Opline)
  GOOGLE_DCHECK_NE(&from, this);
  const Opline* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Opline>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gphp.Opline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gphp.Opline)
    MergeFrom(*source);
  }
}

void Opline::MergeFrom(const Opline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gphp.Opline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      opcode_ = from.opcode_;
    }
    if (cached_has_bits & 0x00000002u) {
      op1_ = from.op1_;
    }
    if (cached_has_bits & 0x00000004u) {
      op2_ = from.op2_;
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000010u) {
      extended_value_ = from.extended_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      lineno_ = from.lineno_;
    }
    if (cached_has_bits & 0x00000040u) {
      result_type_ = from.result_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      op1_type_ = from.op1_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_op2_type(from.op2_type());
  }
}

void Opline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gphp.Opline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Opline::CopyFrom(const Opline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gphp.Opline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Opline::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Opline::Swap(Opline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Opline::InternalSwap(Opline* other) {
  using std::swap;
  swap(opcode_, other->opcode_);
  swap(op1_, other->op1_);
  swap(op2_, other->op2_);
  swap(result_, other->result_);
  swap(extended_value_, other->extended_value_);
  swap(lineno_, other->lineno_);
  swap(result_type_, other->result_type_);
  swap(op1_type_, other->op1_type_);
  swap(op2_type_, other->op2_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Opline::GetMetadata() const {
  protobuf_zend_5fop_5farray_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zend_5fop_5farray_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Opline

// required .gphp.Opcode opcode = 1;
bool Opline::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Opline::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
void Opline::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void Opline::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
::gphp::Opcode Opline::opcode() const {
  // @@protoc_insertion_point(field_get:gphp.Opline.opcode)
  return static_cast< ::gphp::Opcode >(opcode_);
}
void Opline::set_opcode(::gphp::Opcode value) {
  assert(::gphp::Opcode_IsValid(value));
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:gphp.Opline.opcode)
}

// optional uint32 op1 = 2;
bool Opline::has_op1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Opline::set_has_op1() {
  _has_bits_[0] |= 0x00000002u;
}
void Opline::clear_has_op1() {
  _has_bits_[0] &= ~0x00000002u;
}
void Opline::clear_op1() {
  op1_ = 0u;
  clear_has_op1();
}
::google::protobuf::uint32 Opline::op1() const {
  // @@protoc_insertion_point(field_get:gphp.Opline.op1)
  return op1_;
}
void Opline::set_op1(::google::protobuf::uint32 value) {
  set_has_op1();
  op1_ = value;
  // @@protoc_insertion_point(field_set:gphp.Opline.op1)
}

// optional .gphp.Opline.OpType op1_type = 3;
bool Opline::has_op1_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Opline::set_has_op1_type() {
  _has_bits_[0] |= 0x00000080u;
}
void Opline::clear_has_op1_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void Opline::clear_op1_type() {
  op1_type_ = 1;
  clear_has_op1_type();
}
::gphp::Opline_OpType Opline::op1_type() const {
  // @@protoc_insertion_point(field_get:gphp.Opline.op1_type)
  return static_cast< ::gphp::Opline_OpType >(op1_type_);
}
void Opline::set_op1_type(::gphp::Opline_OpType value) {
  assert(::gphp::Opline_OpType_IsValid(value));
  set_has_op1_type();
  op1_type_ = value;
  // @@protoc_insertion_point(field_set:gphp.Opline.op1_type)
}

// optional uint32 op2 = 4;
bool Opline::has_op2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Opline::set_has_op2() {
  _has_bits_[0] |= 0x00000004u;
}
void Opline::clear_has_op2() {
  _has_bits_[0] &= ~0x00000004u;
}
void Opline::clear_op2() {
  op2_ = 0u;
  clear_has_op2();
}
::google::protobuf::uint32 Opline::op2() const {
  // @@protoc_insertion_point(field_get:gphp.Opline.op2)
  return op2_;
}
void Opline::set_op2(::google::protobuf::uint32 value) {
  set_has_op2();
  op2_ = value;
  // @@protoc_insertion_point(field_set:gphp.Opline.op2)
}

// optional .gphp.Opline.OpType op2_type = 5;
bool Opline::has_op2_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Opline::set_has_op2_type() {
  _has_bits_[0] |= 0x00000100u;
}
void Opline::clear_has_op2_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void Opline::clear_op2_type() {
  op2_type_ = 1;
  clear_has_op2_type();
}
::gphp::Opline_OpType Opline::op2_type() const {
  // @@protoc_insertion_point(field_get:gphp.Opline.op2_type)
  return static_cast< ::gphp::Opline_OpType >(op2_type_);
}
void Opline::set_op2_type(::gphp::Opline_OpType value) {
  assert(::gphp::Opline_OpType_IsValid(value));
  set_has_op2_type();
  op2_type_ = value;
  // @@protoc_insertion_point(field_set:gphp.Opline.op2_type)
}

// optional uint32 result = 6;
bool Opline::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Opline::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
void Opline::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
void Opline::clear_result() {
  result_ = 0u;
  clear_has_result();
}
::google::protobuf::uint32 Opline::result() const {
  // @@protoc_insertion_point(field_get:gphp.Opline.result)
  return result_;
}
void Opline::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:gphp.Opline.result)
}

// optional .gphp.Opline.OpType result_type = 7;
bool Opline::has_result_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Opline::set_has_result_type() {
  _has_bits_[0] |= 0x00000040u;
}
void Opline::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void Opline::clear_result_type() {
  result_type_ = 1;
  clear_has_result_type();
}
::gphp::Opline_OpType Opline::result_type() const {
  // @@protoc_insertion_point(field_get:gphp.Opline.result_type)
  return static_cast< ::gphp::Opline_OpType >(result_type_);
}
void Opline::set_result_type(::gphp::Opline_OpType value) {
  assert(::gphp::Opline_OpType_IsValid(value));
  set_has_result_type();
  result_type_ = value;
  // @@protoc_insertion_point(field_set:gphp.Opline.result_type)
}

// optional uint32 extended_value = 8;
bool Opline::has_extended_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Opline::set_has_extended_value() {
  _has_bits_[0] |= 0x00000010u;
}
void Opline::clear_has_extended_value() {
  _has_bits_[0] &= ~0x00000010u;
}
void Opline::clear_extended_value() {
  extended_value_ = 0u;
  clear_has_extended_value();
}
::google::protobuf::uint32 Opline::extended_value() const {
  // @@protoc_insertion_point(field_get:gphp.Opline.extended_value)
  return extended_value_;
}
void Opline::set_extended_value(::google::protobuf::uint32 value) {
  set_has_extended_value();
  extended_value_ = value;
  // @@protoc_insertion_point(field_set:gphp.Opline.extended_value)
}

// optional uint32 lineno = 9;
bool Opline::has_lineno() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Opline::set_has_lineno() {
  _has_bits_[0] |= 0x00000020u;
}
void Opline::clear_has_lineno() {
  _has_bits_[0] &= ~0x00000020u;
}
void Opline::clear_lineno() {
  lineno_ = 0u;
  clear_has_lineno();
}
::google::protobuf::uint32 Opline::lineno() const {
  // @@protoc_insertion_point(field_get:gphp.Opline.lineno)
  return lineno_;
}
void Opline::set_lineno(::google::protobuf::uint32 value) {
  set_has_lineno();
  lineno_ = value;
  // @@protoc_insertion_point(field_set:gphp.Opline.lineno)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ZendOpArray::kOpcodesFieldNumber;
const int ZendOpArray::kLiteralsFieldNumber;
const int ZendOpArray::kVarSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ZendOpArray::ZendOpArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zend_5fop_5farray_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gphp.ZendOpArray)
}
ZendOpArray::ZendOpArray(const ZendOpArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      opcodes_(from.opcodes_),
      literals_(from.literals_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_size_ = from.var_size_;
  // @@protoc_insertion_point(copy_constructor:gphp.ZendOpArray)
}

void ZendOpArray::SharedCtor() {
  _cached_size_ = 0;
  var_size_ = 0u;
}

ZendOpArray::~ZendOpArray() {
  // @@protoc_insertion_point(destructor:gphp.ZendOpArray)
  SharedDtor();
}

void ZendOpArray::SharedDtor() {
}

void ZendOpArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZendOpArray::descriptor() {
  protobuf_zend_5fop_5farray_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zend_5fop_5farray_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ZendOpArray& ZendOpArray::default_instance() {
  protobuf_zend_5fop_5farray_2eproto::InitDefaults();
  return *internal_default_instance();
}

ZendOpArray* ZendOpArray::New(::google::protobuf::Arena* arena) const {
  ZendOpArray* n = new ZendOpArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ZendOpArray::Clear() {
// @@protoc_insertion_point(message_clear_start:gphp.ZendOpArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opcodes_.Clear();
  literals_.Clear();
  var_size_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ZendOpArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gphp.ZendOpArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gphp.Opline opcodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opcodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gphp.Zval literals = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_literals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 var_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_var_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &var_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gphp.ZendOpArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gphp.ZendOpArray)
  return false;
#undef DO_
}

void ZendOpArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gphp.ZendOpArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gphp.Opline opcodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->opcodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->opcodes(static_cast<int>(i)), output);
  }

  // repeated .gphp.Zval literals = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->literals_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->literals(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // required uint32 var_size = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->var_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gphp.ZendOpArray)
}

::google::protobuf::uint8* ZendOpArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gphp.ZendOpArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gphp.Opline opcodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->opcodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->opcodes(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gphp.Zval literals = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->literals_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->literals(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // required uint32 var_size = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->var_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gphp.ZendOpArray)
  return target;
}

size_t ZendOpArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gphp.ZendOpArray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 var_size = 3;
  if (has_var_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->var_size());
  }
  // repeated .gphp.Opline opcodes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->opcodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opcodes(static_cast<int>(i)));
    }
  }

  // repeated .gphp.Zval literals = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->literals_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->literals(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZendOpArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gphp.ZendOpArray)
  GOOGLE_DCHECK_NE(&from, this);
  const ZendOpArray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ZendOpArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gphp.ZendOpArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gphp.ZendOpArray)
    MergeFrom(*source);
  }
}

void ZendOpArray::MergeFrom(const ZendOpArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gphp.ZendOpArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  opcodes_.MergeFrom(from.opcodes_);
  literals_.MergeFrom(from.literals_);
  if (from.has_var_size()) {
    set_var_size(from.var_size());
  }
}

void ZendOpArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gphp.ZendOpArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZendOpArray::CopyFrom(const ZendOpArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gphp.ZendOpArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZendOpArray::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->opcodes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->literals())) return false;
  return true;
}

void ZendOpArray::Swap(ZendOpArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ZendOpArray::InternalSwap(ZendOpArray* other) {
  using std::swap;
  opcodes_.InternalSwap(&other->opcodes_);
  literals_.InternalSwap(&other->literals_);
  swap(var_size_, other->var_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ZendOpArray::GetMetadata() const {
  protobuf_zend_5fop_5farray_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zend_5fop_5farray_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ZendOpArray

// repeated .gphp.Opline opcodes = 1;
int ZendOpArray::opcodes_size() const {
  return opcodes_.size();
}
void ZendOpArray::clear_opcodes() {
  opcodes_.Clear();
}
const ::gphp::Opline& ZendOpArray::opcodes(int index) const {
  // @@protoc_insertion_point(field_get:gphp.ZendOpArray.opcodes)
  return opcodes_.Get(index);
}
::gphp::Opline* ZendOpArray::mutable_opcodes(int index) {
  // @@protoc_insertion_point(field_mutable:gphp.ZendOpArray.opcodes)
  return opcodes_.Mutable(index);
}
::gphp::Opline* ZendOpArray::add_opcodes() {
  // @@protoc_insertion_point(field_add:gphp.ZendOpArray.opcodes)
  return opcodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::gphp::Opline >*
ZendOpArray::mutable_opcodes() {
  // @@protoc_insertion_point(field_mutable_list:gphp.ZendOpArray.opcodes)
  return &opcodes_;
}
const ::google::protobuf::RepeatedPtrField< ::gphp::Opline >&
ZendOpArray::opcodes() const {
  // @@protoc_insertion_point(field_list:gphp.ZendOpArray.opcodes)
  return opcodes_;
}

// repeated .gphp.Zval literals = 2;
int ZendOpArray::literals_size() const {
  return literals_.size();
}
void ZendOpArray::clear_literals() {
  literals_.Clear();
}
const ::gphp::Zval& ZendOpArray::literals(int index) const {
  // @@protoc_insertion_point(field_get:gphp.ZendOpArray.literals)
  return literals_.Get(index);
}
::gphp::Zval* ZendOpArray::mutable_literals(int index) {
  // @@protoc_insertion_point(field_mutable:gphp.ZendOpArray.literals)
  return literals_.Mutable(index);
}
::gphp::Zval* ZendOpArray::add_literals() {
  // @@protoc_insertion_point(field_add:gphp.ZendOpArray.literals)
  return literals_.Add();
}
::google::protobuf::RepeatedPtrField< ::gphp::Zval >*
ZendOpArray::mutable_literals() {
  // @@protoc_insertion_point(field_mutable_list:gphp.ZendOpArray.literals)
  return &literals_;
}
const ::google::protobuf::RepeatedPtrField< ::gphp::Zval >&
ZendOpArray::literals() const {
  // @@protoc_insertion_point(field_list:gphp.ZendOpArray.literals)
  return literals_;
}

// required uint32 var_size = 3;
bool ZendOpArray::has_var_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ZendOpArray::set_has_var_size() {
  _has_bits_[0] |= 0x00000001u;
}
void ZendOpArray::clear_has_var_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void ZendOpArray::clear_var_size() {
  var_size_ = 0u;
  clear_has_var_size();
}
::google::protobuf::uint32 ZendOpArray::var_size() const {
  // @@protoc_insertion_point(field_get:gphp.ZendOpArray.var_size)
  return var_size_;
}
void ZendOpArray::set_var_size(::google::protobuf::uint32 value) {
  set_has_var_size();
  var_size_ = value;
  // @@protoc_insertion_point(field_set:gphp.ZendOpArray.var_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gphp

// @@protoc_insertion_point(global_scope)
