// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zend_types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zend_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gphp {
class Zval_ValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Zval_Value>
     _instance;
} _Zval_Value_default_instance_;
class ZvalDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Zval>
     _instance;
} _Zval_default_instance_;
class HashTable_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HashTable_Item>
     _instance;
} _HashTable_Item_default_instance_;
class HashTableDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HashTable>
     _instance;
} _HashTable_default_instance_;

namespace protobuf_zend_5ftypes_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zval_Value, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zval_Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zval_Value, bval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zval_Value, lval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zval_Value, dval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zval_Value, str_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zval_Value, arr_),
  4,
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zval, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zval, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zval, value_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashTable_Item, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashTable_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashTable_Item, key_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashTable_Item, str_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashTable_Item, num_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashTable_Item, val_),
  3,
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashTable, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashTable, items_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(Zval_Value)},
  { 15, 22, sizeof(Zval)},
  { 24, 33, sizeof(HashTable_Item)},
  { 37, 43, sizeof(HashTable)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Zval_Value_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Zval_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HashTable_Item_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HashTable_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "zend_types.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Zval_Value_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Zval_Value_default_instance_);_Zval_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Zval_default_instance_);_HashTable_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HashTable_Item_default_instance_);_HashTable_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HashTable_default_instance_);_Zval_Value_default_instance_._instance.get_mutable()->arr_ = const_cast< ::gphp::HashTable*>(
      ::gphp::HashTable::internal_default_instance());
  _Zval_default_instance_._instance.get_mutable()->value_ = const_cast< ::gphp::Zval_Value*>(
      ::gphp::Zval_Value::internal_default_instance());
  _HashTable_Item_default_instance_._instance.get_mutable()->val_ = const_cast< ::gphp::Zval*>(
      ::gphp::Zval::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020zend_types.proto\022\004gphp\"\324\002\n\004Zval\022\035\n\004typ"
      "e\030\001 \002(\0162\017.gphp.Zval.Type\022\037\n\005value\030\002 \002(\0132"
      "\020.gphp.Zval.Value\032\\\n\005Value\022\014\n\004bval\030\001 \001(\010"
      "\022\014\n\004lval\030\002 \001(\003\022\014\n\004dval\030\003 \001(\001\022\013\n\003str\030\004 \001("
      "\t\022\034\n\003arr\030\005 \001(\0132\017.gphp.HashTable\"\255\001\n\004Type"
      "\022\016\n\nTYPE_UNDEF\020\000\022\r\n\tTYPE_NULL\020\001\022\r\n\tTYPE_"
      "BOOL\020\002\022\r\n\tTYPE_LONG\020\004\022\017\n\013TYPE_DOUBLE\020\005\022\017"
      "\n\013TYPE_STRING\020\006\022\016\n\nTYPE_ARRAY\020\007\022\017\n\013TYPE_"
      "OBJECT\020\010\022\021\n\rTYPE_RESOURCE\020\t\022\022\n\016TYPE_REFE"
      "RENCE\020\n\"\321\001\n\tHashTable\022#\n\005items\030\001 \003(\0132\024.g"
      "php.HashTable.Item\032\236\001\n\004Item\022.\n\010key_type\030"
      "\001 \002(\0162\034.gphp.HashTable.Item.KeyType\022\017\n\007s"
      "tr_key\030\002 \001(\t\022\017\n\007num_key\030\003 \001(\003\022\027\n\003val\030\004 \002"
      "(\0132\n.gphp.Zval\"+\n\007KeyType\022\017\n\013KEYTYPE_STR"
      "\020\001\022\017\n\013KEYTYPE_NUM\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 579);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zend_types.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_zend_5ftypes_2eproto

const ::google::protobuf::EnumDescriptor* Zval_Type_descriptor() {
  protobuf_zend_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zend_5ftypes_2eproto::file_level_enum_descriptors[0];
}
bool Zval_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Zval_Type Zval::TYPE_UNDEF;
const Zval_Type Zval::TYPE_NULL;
const Zval_Type Zval::TYPE_BOOL;
const Zval_Type Zval::TYPE_LONG;
const Zval_Type Zval::TYPE_DOUBLE;
const Zval_Type Zval::TYPE_STRING;
const Zval_Type Zval::TYPE_ARRAY;
const Zval_Type Zval::TYPE_OBJECT;
const Zval_Type Zval::TYPE_RESOURCE;
const Zval_Type Zval::TYPE_REFERENCE;
const Zval_Type Zval::Type_MIN;
const Zval_Type Zval::Type_MAX;
const int Zval::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* HashTable_Item_KeyType_descriptor() {
  protobuf_zend_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zend_5ftypes_2eproto::file_level_enum_descriptors[1];
}
bool HashTable_Item_KeyType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HashTable_Item_KeyType HashTable_Item::KEYTYPE_STR;
const HashTable_Item_KeyType HashTable_Item::KEYTYPE_NUM;
const HashTable_Item_KeyType HashTable_Item::KeyType_MIN;
const HashTable_Item_KeyType HashTable_Item::KeyType_MAX;
const int HashTable_Item::KeyType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Zval_Value::kBvalFieldNumber;
const int Zval_Value::kLvalFieldNumber;
const int Zval_Value::kDvalFieldNumber;
const int Zval_Value::kStrFieldNumber;
const int Zval_Value::kArrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Zval_Value::Zval_Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zend_5ftypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gphp.Zval.Value)
}
Zval_Value::Zval_Value(const Zval_Value& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_str()) {
    str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  if (from.has_arr()) {
    arr_ = new ::gphp::HashTable(*from.arr_);
  } else {
    arr_ = NULL;
  }
  ::memcpy(&lval_, &from.lval_,
    static_cast<size_t>(reinterpret_cast<char*>(&bval_) -
    reinterpret_cast<char*>(&lval_)) + sizeof(bval_));
  // @@protoc_insertion_point(copy_constructor:gphp.Zval.Value)
}

void Zval_Value::SharedCtor() {
  _cached_size_ = 0;
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&arr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bval_) -
      reinterpret_cast<char*>(&arr_)) + sizeof(bval_));
}

Zval_Value::~Zval_Value() {
  // @@protoc_insertion_point(destructor:gphp.Zval.Value)
  SharedDtor();
}

void Zval_Value::SharedDtor() {
  str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete arr_;
}

void Zval_Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zval_Value::descriptor() {
  protobuf_zend_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zend_5ftypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Zval_Value& Zval_Value::default_instance() {
  protobuf_zend_5ftypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

Zval_Value* Zval_Value::New(::google::protobuf::Arena* arena) const {
  Zval_Value* n = new Zval_Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Zval_Value::Clear() {
// @@protoc_insertion_point(message_clear_start:gphp.Zval.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!str_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*str_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(arr_ != NULL);
      arr_->::gphp::HashTable::Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&lval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bval_) -
        reinterpret_cast<char*>(&lval_)) + sizeof(bval_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Zval_Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gphp.Zval.Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bval = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_bval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 lval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_lval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dval = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_dval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string str = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), static_cast<int>(this->str().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gphp.Zval.Value.str");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gphp.HashTable arr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gphp.Zval.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gphp.Zval.Value)
  return false;
#undef DO_
}

void Zval_Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gphp.Zval.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bval = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bval(), output);
  }

  // optional int64 lval = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->lval(), output);
  }

  // optional double dval = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dval(), output);
  }

  // optional string str = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), static_cast<int>(this->str().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gphp.Zval.Value.str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->str(), output);
  }

  // optional .gphp.HashTable arr = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->arr_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gphp.Zval.Value)
}

::google::protobuf::uint8* Zval_Value::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gphp.Zval.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bval = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bval(), target);
  }

  // optional int64 lval = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->lval(), target);
  }

  // optional double dval = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dval(), target);
  }

  // optional string str = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), static_cast<int>(this->str().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gphp.Zval.Value.str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->str(), target);
  }

  // optional .gphp.HashTable arr = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->arr_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gphp.Zval.Value)
  return target;
}

size_t Zval_Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gphp.Zval.Value)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string str = 4;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

    // optional .gphp.HashTable arr = 5;
    if (has_arr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->arr_);
    }

    // optional int64 lval = 2;
    if (has_lval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lval());
    }

    // optional double dval = 3;
    if (has_dval()) {
      total_size += 1 + 8;
    }

    // optional bool bval = 1;
    if (has_bval()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zval_Value::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gphp.Zval.Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Zval_Value* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Zval_Value>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gphp.Zval.Value)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gphp.Zval.Value)
    MergeFrom(*source);
  }
}

void Zval_Value::MergeFrom(const Zval_Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gphp.Zval.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_str();
      str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_arr()->::gphp::HashTable::MergeFrom(from.arr());
    }
    if (cached_has_bits & 0x00000004u) {
      lval_ = from.lval_;
    }
    if (cached_has_bits & 0x00000008u) {
      dval_ = from.dval_;
    }
    if (cached_has_bits & 0x00000010u) {
      bval_ = from.bval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Zval_Value::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gphp.Zval.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zval_Value::CopyFrom(const Zval_Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gphp.Zval.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zval_Value::IsInitialized() const {
  if (has_arr()) {
    if (!this->arr_->IsInitialized()) return false;
  }
  return true;
}

void Zval_Value::Swap(Zval_Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Zval_Value::InternalSwap(Zval_Value* other) {
  using std::swap;
  str_.Swap(&other->str_);
  swap(arr_, other->arr_);
  swap(lval_, other->lval_);
  swap(dval_, other->dval_);
  swap(bval_, other->bval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Zval_Value::GetMetadata() const {
  protobuf_zend_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zend_5ftypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Zval_Value

// optional bool bval = 1;
bool Zval_Value::has_bval() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Zval_Value::set_has_bval() {
  _has_bits_[0] |= 0x00000010u;
}
void Zval_Value::clear_has_bval() {
  _has_bits_[0] &= ~0x00000010u;
}
void Zval_Value::clear_bval() {
  bval_ = false;
  clear_has_bval();
}
bool Zval_Value::bval() const {
  // @@protoc_insertion_point(field_get:gphp.Zval.Value.bval)
  return bval_;
}
void Zval_Value::set_bval(bool value) {
  set_has_bval();
  bval_ = value;
  // @@protoc_insertion_point(field_set:gphp.Zval.Value.bval)
}

// optional int64 lval = 2;
bool Zval_Value::has_lval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Zval_Value::set_has_lval() {
  _has_bits_[0] |= 0x00000004u;
}
void Zval_Value::clear_has_lval() {
  _has_bits_[0] &= ~0x00000004u;
}
void Zval_Value::clear_lval() {
  lval_ = GOOGLE_LONGLONG(0);
  clear_has_lval();
}
::google::protobuf::int64 Zval_Value::lval() const {
  // @@protoc_insertion_point(field_get:gphp.Zval.Value.lval)
  return lval_;
}
void Zval_Value::set_lval(::google::protobuf::int64 value) {
  set_has_lval();
  lval_ = value;
  // @@protoc_insertion_point(field_set:gphp.Zval.Value.lval)
}

// optional double dval = 3;
bool Zval_Value::has_dval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Zval_Value::set_has_dval() {
  _has_bits_[0] |= 0x00000008u;
}
void Zval_Value::clear_has_dval() {
  _has_bits_[0] &= ~0x00000008u;
}
void Zval_Value::clear_dval() {
  dval_ = 0;
  clear_has_dval();
}
double Zval_Value::dval() const {
  // @@protoc_insertion_point(field_get:gphp.Zval.Value.dval)
  return dval_;
}
void Zval_Value::set_dval(double value) {
  set_has_dval();
  dval_ = value;
  // @@protoc_insertion_point(field_set:gphp.Zval.Value.dval)
}

// optional string str = 4;
bool Zval_Value::has_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Zval_Value::set_has_str() {
  _has_bits_[0] |= 0x00000001u;
}
void Zval_Value::clear_has_str() {
  _has_bits_[0] &= ~0x00000001u;
}
void Zval_Value::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str();
}
const ::std::string& Zval_Value::str() const {
  // @@protoc_insertion_point(field_get:gphp.Zval.Value.str)
  return str_.GetNoArena();
}
void Zval_Value::set_str(const ::std::string& value) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gphp.Zval.Value.str)
}
#if LANG_CXX11
void Zval_Value::set_str(::std::string&& value) {
  set_has_str();
  str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gphp.Zval.Value.str)
}
#endif
void Zval_Value::set_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gphp.Zval.Value.str)
}
void Zval_Value::set_str(const char* value, size_t size) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gphp.Zval.Value.str)
}
::std::string* Zval_Value::mutable_str() {
  set_has_str();
  // @@protoc_insertion_point(field_mutable:gphp.Zval.Value.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Zval_Value::release_str() {
  // @@protoc_insertion_point(field_release:gphp.Zval.Value.str)
  clear_has_str();
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Zval_Value::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    set_has_str();
  } else {
    clear_has_str();
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:gphp.Zval.Value.str)
}

// optional .gphp.HashTable arr = 5;
bool Zval_Value::has_arr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Zval_Value::set_has_arr() {
  _has_bits_[0] |= 0x00000002u;
}
void Zval_Value::clear_has_arr() {
  _has_bits_[0] &= ~0x00000002u;
}
void Zval_Value::clear_arr() {
  if (arr_ != NULL) arr_->::gphp::HashTable::Clear();
  clear_has_arr();
}
const ::gphp::HashTable& Zval_Value::arr() const {
  const ::gphp::HashTable* p = arr_;
  // @@protoc_insertion_point(field_get:gphp.Zval.Value.arr)
  return p != NULL ? *p : *reinterpret_cast<const ::gphp::HashTable*>(
      &::gphp::_HashTable_default_instance_);
}
::gphp::HashTable* Zval_Value::mutable_arr() {
  set_has_arr();
  if (arr_ == NULL) {
    arr_ = new ::gphp::HashTable;
  }
  // @@protoc_insertion_point(field_mutable:gphp.Zval.Value.arr)
  return arr_;
}
::gphp::HashTable* Zval_Value::release_arr() {
  // @@protoc_insertion_point(field_release:gphp.Zval.Value.arr)
  clear_has_arr();
  ::gphp::HashTable* temp = arr_;
  arr_ = NULL;
  return temp;
}
void Zval_Value::set_allocated_arr(::gphp::HashTable* arr) {
  delete arr_;
  arr_ = arr;
  if (arr) {
    set_has_arr();
  } else {
    clear_has_arr();
  }
  // @@protoc_insertion_point(field_set_allocated:gphp.Zval.Value.arr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Zval::kTypeFieldNumber;
const int Zval::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Zval::Zval()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zend_5ftypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gphp.Zval)
}
Zval::Zval(const Zval& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_value()) {
    value_ = new ::gphp::Zval_Value(*from.value_);
  } else {
    value_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:gphp.Zval)
}

void Zval::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&value_)) + sizeof(type_));
}

Zval::~Zval() {
  // @@protoc_insertion_point(destructor:gphp.Zval)
  SharedDtor();
}

void Zval::SharedDtor() {
  if (this != internal_default_instance()) delete value_;
}

void Zval::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zval::descriptor() {
  protobuf_zend_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zend_5ftypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Zval& Zval::default_instance() {
  protobuf_zend_5ftypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

Zval* Zval::New(::google::protobuf::Arena* arena) const {
  Zval* n = new Zval;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Zval::Clear() {
// @@protoc_insertion_point(message_clear_start:gphp.Zval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_value()) {
    GOOGLE_DCHECK(value_ != NULL);
    value_->::gphp::Zval_Value::Clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Zval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gphp.Zval)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gphp.Zval.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gphp::Zval_Type_IsValid(value)) {
            set_type(static_cast< ::gphp::Zval_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gphp.Zval.Value value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gphp.Zval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gphp.Zval)
  return false;
#undef DO_
}

void Zval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gphp.Zval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gphp.Zval.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .gphp.Zval.Value value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gphp.Zval)
}

::google::protobuf::uint8* Zval::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gphp.Zval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gphp.Zval.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .gphp.Zval.Value value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gphp.Zval)
  return target;
}

size_t Zval::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gphp.Zval)
  size_t total_size = 0;

  if (has_value()) {
    // required .gphp.Zval.Value value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  if (has_type()) {
    // required .gphp.Zval.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t Zval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gphp.Zval)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .gphp.Zval.Value value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);

    // required .gphp.Zval.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zval::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gphp.Zval)
  GOOGLE_DCHECK_NE(&from, this);
  const Zval* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Zval>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gphp.Zval)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gphp.Zval)
    MergeFrom(*source);
  }
}

void Zval::MergeFrom(const Zval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gphp.Zval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_value()->::gphp::Zval_Value::MergeFrom(from.value());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Zval::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gphp.Zval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zval::CopyFrom(const Zval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gphp.Zval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zval::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_value()) {
    if (!this->value_->IsInitialized()) return false;
  }
  return true;
}

void Zval::Swap(Zval* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Zval::InternalSwap(Zval* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Zval::GetMetadata() const {
  protobuf_zend_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zend_5ftypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Zval

// required .gphp.Zval.Type type = 1;
bool Zval::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Zval::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Zval::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Zval::clear_type() {
  type_ = 0;
  clear_has_type();
}
::gphp::Zval_Type Zval::type() const {
  // @@protoc_insertion_point(field_get:gphp.Zval.type)
  return static_cast< ::gphp::Zval_Type >(type_);
}
void Zval::set_type(::gphp::Zval_Type value) {
  assert(::gphp::Zval_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:gphp.Zval.type)
}

// required .gphp.Zval.Value value = 2;
bool Zval::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Zval::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void Zval::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void Zval::clear_value() {
  if (value_ != NULL) value_->::gphp::Zval_Value::Clear();
  clear_has_value();
}
const ::gphp::Zval_Value& Zval::value() const {
  const ::gphp::Zval_Value* p = value_;
  // @@protoc_insertion_point(field_get:gphp.Zval.value)
  return p != NULL ? *p : *reinterpret_cast<const ::gphp::Zval_Value*>(
      &::gphp::_Zval_Value_default_instance_);
}
::gphp::Zval_Value* Zval::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::gphp::Zval_Value;
  }
  // @@protoc_insertion_point(field_mutable:gphp.Zval.value)
  return value_;
}
::gphp::Zval_Value* Zval::release_value() {
  // @@protoc_insertion_point(field_release:gphp.Zval.value)
  clear_has_value();
  ::gphp::Zval_Value* temp = value_;
  value_ = NULL;
  return temp;
}
void Zval::set_allocated_value(::gphp::Zval_Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:gphp.Zval.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashTable_Item::kKeyTypeFieldNumber;
const int HashTable_Item::kStrKeyFieldNumber;
const int HashTable_Item::kNumKeyFieldNumber;
const int HashTable_Item::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashTable_Item::HashTable_Item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zend_5ftypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gphp.HashTable.Item)
}
HashTable_Item::HashTable_Item(const HashTable_Item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_str_key()) {
    str_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_key_);
  }
  if (from.has_val()) {
    val_ = new ::gphp::Zval(*from.val_);
  } else {
    val_ = NULL;
  }
  ::memcpy(&num_key_, &from.num_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_type_) -
    reinterpret_cast<char*>(&num_key_)) + sizeof(key_type_));
  // @@protoc_insertion_point(copy_constructor:gphp.HashTable.Item)
}

void HashTable_Item::SharedCtor() {
  _cached_size_ = 0;
  str_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&val_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_key_) -
      reinterpret_cast<char*>(&val_)) + sizeof(num_key_));
  key_type_ = 1;
}

HashTable_Item::~HashTable_Item() {
  // @@protoc_insertion_point(destructor:gphp.HashTable.Item)
  SharedDtor();
}

void HashTable_Item::SharedDtor() {
  str_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete val_;
}

void HashTable_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashTable_Item::descriptor() {
  protobuf_zend_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zend_5ftypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HashTable_Item& HashTable_Item::default_instance() {
  protobuf_zend_5ftypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

HashTable_Item* HashTable_Item::New(::google::protobuf::Arena* arena) const {
  HashTable_Item* n = new HashTable_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashTable_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:gphp.HashTable.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!str_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*str_key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(val_ != NULL);
      val_->::gphp::Zval::Clear();
    }
  }
  if (cached_has_bits & 12u) {
    num_key_ = GOOGLE_LONGLONG(0);
    key_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HashTable_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gphp.HashTable.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gphp.HashTable.Item.KeyType key_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gphp::HashTable_Item_KeyType_IsValid(value)) {
            set_key_type(static_cast< ::gphp::HashTable_Item_KeyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string str_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str_key().data(), static_cast<int>(this->str_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gphp.HashTable.Item.str_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 num_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_num_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gphp.Zval val = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_val()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gphp.HashTable.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gphp.HashTable.Item)
  return false;
#undef DO_
}

void HashTable_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gphp.HashTable.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gphp.HashTable.Item.KeyType key_type = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->key_type(), output);
  }

  // optional string str_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_key().data(), static_cast<int>(this->str_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gphp.HashTable.Item.str_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->str_key(), output);
  }

  // optional int64 num_key = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->num_key(), output);
  }

  // required .gphp.Zval val = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->val_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gphp.HashTable.Item)
}

::google::protobuf::uint8* HashTable_Item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gphp.HashTable.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gphp.HashTable.Item.KeyType key_type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->key_type(), target);
  }

  // optional string str_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_key().data(), static_cast<int>(this->str_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gphp.HashTable.Item.str_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str_key(), target);
  }

  // optional int64 num_key = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->num_key(), target);
  }

  // required .gphp.Zval val = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->val_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gphp.HashTable.Item)
  return target;
}

size_t HashTable_Item::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gphp.HashTable.Item)
  size_t total_size = 0;

  if (has_val()) {
    // required .gphp.Zval val = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->val_);
  }

  if (has_key_type()) {
    // required .gphp.HashTable.Item.KeyType key_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->key_type());
  }

  return total_size;
}
size_t HashTable_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gphp.HashTable.Item)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000a) ^ 0x0000000a) == 0) {  // All required fields are present.
    // required .gphp.Zval val = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->val_);

    // required .gphp.HashTable.Item.KeyType key_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->key_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string str_key = 2;
  if (has_str_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str_key());
  }

  // optional int64 num_key = 3;
  if (has_num_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashTable_Item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gphp.HashTable.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const HashTable_Item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HashTable_Item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gphp.HashTable.Item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gphp.HashTable.Item)
    MergeFrom(*source);
  }
}

void HashTable_Item::MergeFrom(const HashTable_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gphp.HashTable.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_str_key();
      str_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_val()->::gphp::Zval::MergeFrom(from.val());
    }
    if (cached_has_bits & 0x00000004u) {
      num_key_ = from.num_key_;
    }
    if (cached_has_bits & 0x00000008u) {
      key_type_ = from.key_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HashTable_Item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gphp.HashTable.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashTable_Item::CopyFrom(const HashTable_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gphp.HashTable.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashTable_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000a) != 0x0000000a) return false;
  if (has_val()) {
    if (!this->val_->IsInitialized()) return false;
  }
  return true;
}

void HashTable_Item::Swap(HashTable_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashTable_Item::InternalSwap(HashTable_Item* other) {
  using std::swap;
  str_key_.Swap(&other->str_key_);
  swap(val_, other->val_);
  swap(num_key_, other->num_key_);
  swap(key_type_, other->key_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashTable_Item::GetMetadata() const {
  protobuf_zend_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zend_5ftypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashTable_Item

// required .gphp.HashTable.Item.KeyType key_type = 1;
bool HashTable_Item::has_key_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HashTable_Item::set_has_key_type() {
  _has_bits_[0] |= 0x00000008u;
}
void HashTable_Item::clear_has_key_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void HashTable_Item::clear_key_type() {
  key_type_ = 1;
  clear_has_key_type();
}
::gphp::HashTable_Item_KeyType HashTable_Item::key_type() const {
  // @@protoc_insertion_point(field_get:gphp.HashTable.Item.key_type)
  return static_cast< ::gphp::HashTable_Item_KeyType >(key_type_);
}
void HashTable_Item::set_key_type(::gphp::HashTable_Item_KeyType value) {
  assert(::gphp::HashTable_Item_KeyType_IsValid(value));
  set_has_key_type();
  key_type_ = value;
  // @@protoc_insertion_point(field_set:gphp.HashTable.Item.key_type)
}

// optional string str_key = 2;
bool HashTable_Item::has_str_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HashTable_Item::set_has_str_key() {
  _has_bits_[0] |= 0x00000001u;
}
void HashTable_Item::clear_has_str_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void HashTable_Item::clear_str_key() {
  str_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str_key();
}
const ::std::string& HashTable_Item::str_key() const {
  // @@protoc_insertion_point(field_get:gphp.HashTable.Item.str_key)
  return str_key_.GetNoArena();
}
void HashTable_Item::set_str_key(const ::std::string& value) {
  set_has_str_key();
  str_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gphp.HashTable.Item.str_key)
}
#if LANG_CXX11
void HashTable_Item::set_str_key(::std::string&& value) {
  set_has_str_key();
  str_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gphp.HashTable.Item.str_key)
}
#endif
void HashTable_Item::set_str_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str_key();
  str_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gphp.HashTable.Item.str_key)
}
void HashTable_Item::set_str_key(const char* value, size_t size) {
  set_has_str_key();
  str_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gphp.HashTable.Item.str_key)
}
::std::string* HashTable_Item::mutable_str_key() {
  set_has_str_key();
  // @@protoc_insertion_point(field_mutable:gphp.HashTable.Item.str_key)
  return str_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HashTable_Item::release_str_key() {
  // @@protoc_insertion_point(field_release:gphp.HashTable.Item.str_key)
  clear_has_str_key();
  return str_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HashTable_Item::set_allocated_str_key(::std::string* str_key) {
  if (str_key != NULL) {
    set_has_str_key();
  } else {
    clear_has_str_key();
  }
  str_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str_key);
  // @@protoc_insertion_point(field_set_allocated:gphp.HashTable.Item.str_key)
}

// optional int64 num_key = 3;
bool HashTable_Item::has_num_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HashTable_Item::set_has_num_key() {
  _has_bits_[0] |= 0x00000004u;
}
void HashTable_Item::clear_has_num_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void HashTable_Item::clear_num_key() {
  num_key_ = GOOGLE_LONGLONG(0);
  clear_has_num_key();
}
::google::protobuf::int64 HashTable_Item::num_key() const {
  // @@protoc_insertion_point(field_get:gphp.HashTable.Item.num_key)
  return num_key_;
}
void HashTable_Item::set_num_key(::google::protobuf::int64 value) {
  set_has_num_key();
  num_key_ = value;
  // @@protoc_insertion_point(field_set:gphp.HashTable.Item.num_key)
}

// required .gphp.Zval val = 4;
bool HashTable_Item::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HashTable_Item::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
void HashTable_Item::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
void HashTable_Item::clear_val() {
  if (val_ != NULL) val_->::gphp::Zval::Clear();
  clear_has_val();
}
const ::gphp::Zval& HashTable_Item::val() const {
  const ::gphp::Zval* p = val_;
  // @@protoc_insertion_point(field_get:gphp.HashTable.Item.val)
  return p != NULL ? *p : *reinterpret_cast<const ::gphp::Zval*>(
      &::gphp::_Zval_default_instance_);
}
::gphp::Zval* HashTable_Item::mutable_val() {
  set_has_val();
  if (val_ == NULL) {
    val_ = new ::gphp::Zval;
  }
  // @@protoc_insertion_point(field_mutable:gphp.HashTable.Item.val)
  return val_;
}
::gphp::Zval* HashTable_Item::release_val() {
  // @@protoc_insertion_point(field_release:gphp.HashTable.Item.val)
  clear_has_val();
  ::gphp::Zval* temp = val_;
  val_ = NULL;
  return temp;
}
void HashTable_Item::set_allocated_val(::gphp::Zval* val) {
  delete val_;
  val_ = val;
  if (val) {
    set_has_val();
  } else {
    clear_has_val();
  }
  // @@protoc_insertion_point(field_set_allocated:gphp.HashTable.Item.val)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashTable::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashTable::HashTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zend_5ftypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gphp.HashTable)
}
HashTable::HashTable(const HashTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gphp.HashTable)
}

void HashTable::SharedCtor() {
  _cached_size_ = 0;
}

HashTable::~HashTable() {
  // @@protoc_insertion_point(destructor:gphp.HashTable)
  SharedDtor();
}

void HashTable::SharedDtor() {
}

void HashTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashTable::descriptor() {
  protobuf_zend_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zend_5ftypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HashTable& HashTable::default_instance() {
  protobuf_zend_5ftypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

HashTable* HashTable::New(::google::protobuf::Arena* arena) const {
  HashTable* n = new HashTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashTable::Clear() {
// @@protoc_insertion_point(message_clear_start:gphp.HashTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HashTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gphp.HashTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gphp.HashTable.Item items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gphp.HashTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gphp.HashTable)
  return false;
#undef DO_
}

void HashTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gphp.HashTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gphp.HashTable.Item items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gphp.HashTable)
}

::google::protobuf::uint8* HashTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gphp.HashTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gphp.HashTable.Item items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gphp.HashTable)
  return target;
}

size_t HashTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gphp.HashTable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .gphp.HashTable.Item items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gphp.HashTable)
  GOOGLE_DCHECK_NE(&from, this);
  const HashTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HashTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gphp.HashTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gphp.HashTable)
    MergeFrom(*source);
  }
}

void HashTable::MergeFrom(const HashTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gphp.HashTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void HashTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gphp.HashTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashTable::CopyFrom(const HashTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gphp.HashTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashTable::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void HashTable::Swap(HashTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashTable::InternalSwap(HashTable* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashTable::GetMetadata() const {
  protobuf_zend_5ftypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zend_5ftypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashTable

// repeated .gphp.HashTable.Item items = 1;
int HashTable::items_size() const {
  return items_.size();
}
void HashTable::clear_items() {
  items_.Clear();
}
const ::gphp::HashTable_Item& HashTable::items(int index) const {
  // @@protoc_insertion_point(field_get:gphp.HashTable.items)
  return items_.Get(index);
}
::gphp::HashTable_Item* HashTable::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:gphp.HashTable.items)
  return items_.Mutable(index);
}
::gphp::HashTable_Item* HashTable::add_items() {
  // @@protoc_insertion_point(field_add:gphp.HashTable.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::gphp::HashTable_Item >*
HashTable::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:gphp.HashTable.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::gphp::HashTable_Item >&
HashTable::items() const {
  // @@protoc_insertion_point(field_list:gphp.HashTable.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gphp

// @@protoc_insertion_point(global_scope)
