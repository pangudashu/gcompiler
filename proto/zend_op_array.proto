syntax = "proto2";

package gphp;

import "zend_types.proto";

enum Opcode
{ /*{{{*/
    NOP = 0 ;
    ADD = 1 ;
    SUB = 2 ;
    MUL = 3 ;
    DIV = 4 ;
    MOD = 5 ;
    SL = 6 ;
    SR = 7 ;
    CONCAT = 8 ;
    BW_OR = 9 ;
    BW_AND = 10 ;
    BW_XOR = 11 ;
    BW_NOT = 12 ;
    BOOL_NOT = 13 ;
    BOOL_XOR = 14 ;
    IS_IDENTICAL = 15 ;
    IS_NOT_IDENTICAL = 16 ;
    IS_EQUAL = 17 ;
    IS_NOT_EQUAL = 18 ;
    IS_SMALLER = 19 ;
    IS_SMALLER_OR_EQUAL = 20 ;
    CAST = 21 ;
    QM_ASSIGN = 22 ;
    ASSIGN_ADD = 23 ;
    ASSIGN_SUB = 24 ;
    ASSIGN_MUL = 25 ;
    ASSIGN_DIV = 26 ;
    ASSIGN_MOD = 27 ;
    ASSIGN_SL = 28 ;
    ASSIGN_SR = 29 ;
    ASSIGN_CONCAT = 30 ;
    ASSIGN_BW_OR = 31 ;
    ASSIGN_BW_AND = 32 ;
    ASSIGN_BW_XOR = 33 ;
    PRE_INC = 34 ;
    PRE_DEC = 35 ;
    POST_INC = 36 ;
    POST_DEC = 37 ;
    ASSIGN = 38 ;
    ASSIGN_REF = 39 ;
    ECHO = 40 ;
    GENERATOR_CREATE = 41 ;
    JMP = 42 ;
    JMPZ = 43 ;
    JMPNZ = 44 ;
    JMPZNZ = 45 ;
    JMPZ_EX = 46 ;
    JMPNZ_EX = 47 ;
    CASE = 48 ;
    CHECK_VAR = 49 ;
    SEND_VAR_NO_REF_EX = 50 ;
    MAKE_REF = 51 ;
    BOOL = 52 ;
    FAST_CONCAT = 53 ;
    ROPE_INIT = 54 ;
    ROPE_ADD = 55 ;
    ROPE_END = 56 ;
    BEGIN_SILENCE = 57 ;
    END_SILENCE = 58 ;
    INIT_FCALL_BY_NAME = 59 ;
    DO_FCALL = 60 ;
    INIT_FCALL = 61 ;
    RETURN = 62 ;
    RECV = 63 ;
    RECV_INIT = 64 ;
    SEND_VAL = 65 ;
    SEND_VAR_EX = 66 ;
    SEND_REF = 67 ;
    NEW = 68 ;
    INIT_NS_FCALL_BY_NAME = 69 ;
    FREE = 70 ;
    INIT_ARRAY = 71 ;
    ADD_ARRAY_ELEMENT = 72 ;
    INCLUDE_OR_EVAL = 73 ;
    UNSET_VAR = 74 ;
    UNSET_DIM = 75 ;
    UNSET_OBJ = 76 ;
    FE_RESET_R = 77 ;
    FE_FETCH_R = 78 ;
    EXIT = 79 ;
    FETCH_R = 80 ;
    FETCH_DIM_R = 81 ;
    FETCH_OBJ_R = 82 ;
    FETCH_W = 83 ;
    FETCH_DIM_W = 84 ;
    FETCH_OBJ_W = 85 ;
    FETCH_RW = 86 ;
    FETCH_DIM_RW = 87 ;
    FETCH_OBJ_RW = 88 ;
    FETCH_IS = 89 ;
    FETCH_DIM_IS = 90 ;
    FETCH_OBJ_IS = 91 ;
    FETCH_FUNC_ARG = 92 ;
    FETCH_DIM_FUNC_ARG = 93 ;
    FETCH_OBJ_FUNC_ARG = 94 ;
    FETCH_UNSET = 95 ;
    FETCH_DIM_UNSET = 96 ;
    FETCH_OBJ_UNSET = 97 ;
    FETCH_LIST = 98 ;
    FETCH_CONSTANT = 99 ;
    EXT_STMT = 101 ;
    EXT_FCALL_BEGIN = 102 ;
    EXT_FCALL_END = 103 ;
    EXT_NOP = 104 ;
    TICKS = 105 ;
    SEND_VAR_NO_REF = 106 ;
    CATCH = 107 ;
    THROW = 108 ;
    FETCH_CLASS = 109 ;
    CLONE = 110 ;
    RETURN_BY_REF = 111 ;
    INIT_METHOD_CALL = 112 ;
    INIT_STATIC_METHOD_CALL = 113 ;
    ISSET_ISEMPTY_VAR = 114 ;
    ISSET_ISEMPTY_DIM_OBJ = 115 ;
    SEND_VAL_EX = 116 ;
    SEND_VAR = 117 ;
    INIT_USER_CALL = 118 ;
    SEND_ARRAY = 119 ;
    SEND_USER = 120 ;
    STRLEN = 121 ;
    DEFINED = 122 ;
    TYPE_CHECK = 123 ;
    VERIFY_RETURN_TYPE = 124 ;
    FE_RESET_RW = 125 ;
    FE_FETCH_RW = 126 ;
    FE_FREE = 127 ;
    INIT_DYNAMIC_CALL = 128 ;
    DO_ICALL = 129 ;
    DO_UCALL = 130 ;
    DO_FCALL_BY_NAME = 131 ;
    PRE_INC_OBJ = 132 ;
    PRE_DEC_OBJ = 133 ;
    POST_INC_OBJ = 134 ;
    POST_DEC_OBJ = 135 ;
    ASSIGN_OBJ = 136 ;
    OP_DATA = 137 ;
    INSTANCEOF = 138 ;
    DECLARE_CLASS = 139 ;
    DECLARE_INHERITED_CLASS = 140 ;
    DECLARE_FUNCTION = 141 ;
    YIELD_FROM = 142 ;
    DECLARE_CONST = 143 ;
    ADD_INTERFACE = 144 ;
    DECLARE_INHERITED_CLASS_DELAYED = 145 ;
    VERIFY_ABSTRACT_CLASS = 146 ;
    ASSIGN_DIM = 147 ;
    ISSET_ISEMPTY_PROP_OBJ = 148 ;
    HANDLE_EXCEPTION = 149 ;
    USER_OPCODE = 150 ;
    ASSERT_CHECK = 151 ;
    JMP_SET = 152 ;
    DECLARE_LAMBDA_FUNCTION = 153 ;
    ADD_TRAIT = 154 ;
    BIND_TRAITS = 155 ;
    SEPARATE = 156 ;
    FETCH_CLASS_NAME = 157 ;
    CALL_TRAMPOLINE = 158 ;
    DISCARD_EXCEPTION = 159 ;
    YIELD = 160 ;
    GENERATOR_RETURN = 161 ;
    FAST_CALL = 162 ;
    FAST_RET = 163 ;
    RECV_VARIADIC = 164 ;
    SEND_UNPACK = 165 ;
    POW = 166 ;
    ASSIGN_POW = 167 ;
    BIND_GLOBAL = 168 ;
    COALESCE = 169 ;
    SPACESHIP = 170 ;
    DECLARE_ANON_CLASS = 171 ;
    DECLARE_ANON_INHERITED_CLASS = 172 ;
    FETCH_STATIC_PROP_R = 173 ;
    FETCH_STATIC_PROP_W = 174 ;
    FETCH_STATIC_PROP_RW = 175 ;
    FETCH_STATIC_PROP_IS = 176 ;
    FETCH_STATIC_PROP_FUNC_ARG = 177 ;
    FETCH_STATIC_PROP_UNSET = 178 ;
    UNSET_STATIC_PROP = 179 ;
    ISSET_ISEMPTY_STATIC_PROP = 180 ;
    FETCH_CLASS_CONSTANT = 181 ;
    BIND_LEXICAL = 182 ;
    BIND_STATIC = 183 ;
    FETCH_THIS = 184 ;
    ISSET_ISEMPTY_THIS = 186 ;
};/*}}}*/

message Opline
{
    enum OpType
    {
        CONST    = 1;
        TMP_VAR  = 2;
        VAR      = 4;
        UNUSED   = 8; //Unused variable
        CV       = 16; //Compiled variable
    };

    required Opcode opcode          = 1;
    optional uint32 op1             = 2;
    optional OpType op1_type        = 3;
    optional uint32 op2             = 4;
    optional OpType op2_type        = 5;
    optional uint32 result          = 6;
    optional OpType result_type     = 7;
    optional uint32 extended_value  = 8;
    optional uint32 lineno          = 9;
}

message ZendOpArray
{
    repeated Opline opcodes     = 1; //指令数组
    repeated Zval   literals    = 2; //字面量数组
    required uint32 var_size    = 3;
}


